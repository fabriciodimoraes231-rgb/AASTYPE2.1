==========================================================================
            DOCUMENTA√á√ÉO T√âCNICA - PROJETO AAS TYPE 2
             Asset Administration Shell (AAS) com IoT
==========================================================================

VIS√ÉO GERAL T√âCNICA
===================

Este projeto demonstra a implementa√ß√£o de um Digital Twin, utilizando o padr√£o
Asset Administration Shell (AAS) v3.0, para um ativo industrial (ar condicionado).
O sistema integra dados de sensores IoT em tempo real, consumidos via MQTT e
expostos atrav√©s de um servidor OPC UA e uma API HTTP/REST, seguindo os
princ√≠pios da Ind√∫stria 4.0.

COMPONENTES PRINCIPAIS
======================

1. SIMULADOR IoT (Python 3.9)
   - Imagem Docker: `python:3.9-slim`
   - Localiza√ß√£o: `/iot-sensor-simulator/app/sensor_simulator.py`
   - Biblioteca MQTT: `paho-mqtt`
   - Fun√ß√£o: Publica mensagens JSON em t√≥picos MQTT distintos para cada sensor.
   - Payload JSON: `{"value": <dado>, "unit": "...", "timestamp": "..."}`
   - T√≥picos: `sensors/temperature`, `sensors/humidity`, `sensors/noiselevel`, `sensors/status`
   - Frequ√™ncia: 1 Hz (configur√°vel via vari√°vel de ambiente `SENSOR_INTERVAL`)

2. FA¬≥ST-SERVICE (Java)
   - Imagem Docker: `fraunhoferiosb/faaast-service:1.2.0`
   - Fun√ß√£o: Core do sistema. Atua como um middleware que consome dados
     de um Message Broker (MQTT) e os mapeia para um modelo de dados AAS.
     Exp√µe o AAS atrav√©s de m√∫ltiplos endpoints.
   - Endpoints:
     * HTTP/REST API (porta 8080): Para acesso e manipula√ß√£o do AAS.
     * OPC UA Server (porta 4840): Para integra√ß√£o com sistemas SCADA/HMI.
   - Configura√ß√£o Principal: `/FAAAST-Service/misc/examples/config.json`

3. MODELO AAS (JSON)
   - Localiza√ß√£o: `/FAAAST-Service/misc/examples/model.json`
   - Padr√£o: AAS v3.0, serializado em JSON.
   - Submodelos Chave:
     * DigitalNamePlate (ID: `https://carrier.com.br/ids/sm/DigitalNameplate/3/0`)
     * TechnicalData (ID: `https://carrier.com.br/ids/sm/TechnicalData/1/1`)

4. MQTT BROKER (Eclipse Mosquitto)
   - Imagem Docker: `eclipse-mosquitto:2.0`
   - Porta: 1883
   - Network: `iot-network` (Docker Bridge Network)

ARQUITETURA E FLUXO DE DADOS
=============================

1. PUBLICA√á√ÉO (IoT Simulator):
   - O script Python `sensor_simulator.py` gera dados aleat√≥rios.
   - Utiliza a biblioteca `paho-mqtt` para se conectar ao broker Mosquitto.
   - Serializa os dados em formato JSON.
   - Publica a mensagem no t√≥pico MQTT correspondente (ex: `sensors/temperature`).

2. MAPEAMENTO (FA¬≥ST-Service):
   - O `MqttAssetConnection` do FA¬≥ST se inscreve nos t√≥picos definidos em `config.json`.
   - Ao receber uma mensagem, o `subscriptionProvider` correspondente √© acionado.
   - A `query` JSONPath (`$.value`) √© aplicada ao payload JSON para extrair o valor.
   - O valor extra√≠do √© mapeado para a `Property` do AAS definida na chave de refer√™ncia.
   - O modelo de dados AAS em mem√≥ria √© atualizado com o novo valor.

3. EXPOSI√á√ÉO (Endpoints):
   - O servidor OPC UA (porta 4840) reflete a mudan√ßa em tempo real no n√≥ correspondente.
   - A API HTTP (porta 8080) retorna o valor atualizado em novas requisi√ß√µes.

ESTRUTURA AAS IMPLEMENTADA (DETALHADA)
=======================================

AssetAdministrationShell: "ArCondicionadoAAS" (ID: `https://carrier.com.br/ids/aas/3044_4111_9052_1678`)
‚îú‚îÄ‚îÄ Asset: Ar Condicionado Carrier (GlobalAssetID: `https://carrier.com.br/ids/asset/6205_5111_9052_8720`)
‚îú‚îÄ‚îÄ Submodel: DigitalNamePlate (ID: `https://carrier.com.br/ids/sm/DigitalNameplate/3/0`)
‚îÇ   ‚îî‚îÄ‚îÄ ... (propriedades est√°ticas de identifica√ß√£o)
‚îî‚îÄ‚îÄ Submodel: TechnicalData (ID: `https://carrier.com.br/ids/sm/TechnicalData/1/1`)
    ‚îî‚îÄ‚îÄ Sensores (SubmodelElementCollection, idShort: "Sensores")
        ‚îú‚îÄ‚îÄ Temperature (Property, idShort: "Temperature", semanticId: `0173-1#02-BAA120#008`)
        ‚îú‚îÄ‚îÄ Humidity (Property, idShort: "Humidity", semanticId: `0173-1#02-BAE342#004---1ED74F85`)
        ‚îú‚îÄ‚îÄ NoiseLevel (Property, idShort: "NoiseLevel", semanticId: `0173-1#02-BAA036#005---74F53B6F`)
        ‚îî‚îÄ‚îÄ Status (Property, idShort: "Status", semanticId: `0173-1#02-AAD596#001---89B472FF`)

CONFIGURA√á√ÉO MQTT (DETALHADA)
===============================

A se√ß√£o `subscriptionProviders` em `config.json` √© um mapa onde a chave √© uma *string de refer√™ncia* que identifica unicamente um elemento no AAS.

Sintaxe da String de Refer√™ncia:
`(TipoElemento1)valor1, (TipoElemento2)valor2, ...`

Exemplo para a propriedade "Temperature":
`(Submodel)https://carrier.com.br/ids/sm/TechnicalData/1/1, (SubmodelElementCollection)Sensores, (Property)Temperature`

- `(Submodel)https://...`: Aponta para o Submodelo pelo seu ID global.
- `(SubmodelElementCollection)Sensores`: Navega para a cole√ß√£o com `idShort` "Sensores".
- `(Property)Temperature`: Seleciona a propriedade com `idShort` "Temperature".

EXECU√á√ÉO E VALIDA√á√ÉO T√âCNICA
=============================

1. Iniciar Ambiente Docker:
   ```bash
   # Navegue para o diret√≥rio do simulador
   cd /home/manuel/AASTYPE2-main/iot-sensor-simulator/docker
   # Inicia o broker e o simulador
   docker compose up -d --build
   ```

2. Iniciar FA¬≥ST-Service:
   ```bash
   # Navegue para o diret√≥rio do servi√ßo
   cd /home/manuel/AASTYPE2-main/FAAAST-Service
   # Execute o container FA¬≥ST
   docker run -d --name carrier-faaast-realtime \
     --network iot-network \
     -p 8080:8080 -p 4840:4840 \
     -v $(pwd)/misc/examples/model.json:/app/resources/model.json \
     -v $(pwd)/misc/examples/config.json:/app/resources/config.json \
     fraunhoferiosb/faaast-service:1.2.0 \
     -c /app/resources/config.json
   ```

3. Valida√ß√£o T√©cnica:
   - **Verificar Logs do Simulador:**
     ```bash
     docker logs iot-sensor-simulator -f
     # Sa√≠da esperada: üìä Temperature: 25.1¬∞C | Humidity: 60.5% | ...
     ```
   - **Verificar Conex√£o MQTT no FA¬≥ST:**
     ```bash
     docker logs carrier-faaast-realtime | grep "Asset connection established"
     # Sa√≠da esperada: Asset connection established (endpoint: tcp://mqtt-broker:1883)
     ```
   - **Inspecionar Tr√°fego MQTT (requer `mosquitto-clients`):**
     ```bash
     docker run -it --network iot-network eclipse-mosquitto mosquitto_sub -h mqtt-broker -t "sensors/#" -v
     # Sa√≠da esperada: sensors/temperature {"value": 25.1, ...}
     ```
   - **Consultar Valor via HTTP API:**
     ```bash
     # ID do Submodelo TechnicalData em Base64URL
     SUBMODEL_ID="aHR0cHM6Ly9jYXJyaWVyLmNvbS5ici9pZHMvc20vVGVjaG5pY2FsRGF0YS8xLzE"
     curl -s "http://localhost:8080/api/v3.0/submodels/${SUBMODEL_ID}/submodel-elements/Sensores.Temperature/value"
     # Sa√≠da esperada: (apenas o valor, ex: 25.1)
     ```

DETALHES T√âCNICOS ADICIONAIS
============================

- **Tipos de Dados**: As propriedades no AAS (`Temperature`, `Humidity`, `NoiseLevel`) s√£o definidas com `valueType` "xs:double". A propriedade `Status` √© "xs:string". O FA¬≥ST-Service realiza a convers√£o autom√°tica do valor JSON para o tipo de dado especificado.
- **Serializa√ß√£o**: O modelo AAS √© fornecido ao FA¬≥ST no formato JSON. A API HTTP tamb√©m retorna dados serializados em JSON por padr√£o, mas pode suportar outros formatos como XML via `Content-Type` headers.
- **Seguran√ßa**: A configura√ß√£o atual n√£o implementa seguran√ßa. Em um ambiente de produ√ß√£o, seria crucial configurar:
  - Autentica√ß√£o no MQTT Broker (usu√°rio/senha, certificados).
  - TLS para a comunica√ß√£o MQTT e OPC UA.
  - Autentica√ß√£o/Autoriza√ß√£o na API HTTP (ex: OAuth2/JWT).

==========================================================================
Esta documenta√ß√£o fornece uma base t√©cnica para o entendimento, opera√ß√£o e
extens√£o do projeto, alinhado com os padr√µes da Ind√∫stria 4.0.
==========================================================================